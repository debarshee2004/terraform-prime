version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: gin-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ginapi
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gin-api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ginapi"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Gin API Application
  gin-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gin-api-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: ginapi
      DB_SSLMODE: disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gin-api-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gin-api-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - gin-api-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  gin-api-network:
    driver: bridge
